def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

apply plugin: "com.android.application"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: "com.google.gms.google-services"
apply plugin: "kotlin-android"

android {
    // namespace "net.girls.yang"
    namespace "global.net.liru"

    compileSdk build_versions.compile_sdk
    // ndkVersion flutter.ndkVersion
    ndkVersion "$vNdkVersion"
    buildToolsVersion build_versions.build_tools

    defaultConfig {
        ndk {
        debugSymbolLevel 'FULL'
    }
        // applicationId "net.girls.yang"
        applicationId namespace

        // minSdkVersion flutter.minSdkVersion // default
        minSdkVersion build_versions.min_sdk
        // targetSdkVersion flutter.targetSdkVersion
        targetSdkVersion build_versions.target_sdk
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    flavorDimensions "app"
    productFlavors {
        "mobile" {}
        "tv" {
            applicationIdSuffix ".tv"
            // resValue "string", "app_name", "Global Net TV"
            versionNameSuffix ".tv"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storePassword keystoreProperties["storePassword"]
            storeFile file("global.net.liru.keystore")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            lintOptions {
                disable "InvalidPackage"
                disable "Instantiatable"
                checkReleaseBuilds false
                abortOnError false
            }
        }
    }
}

flutter {
    source "../.."
}

dependencies {
    
}