def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file("key.properties")
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty("flutter.sdk")
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

apply plugin: "com.android.application"
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: "com.google.gms.google-services"

android {
    int compile_sdk = 33
    compileSdk compile_sdk
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "ggn.liru.yang.net"
        minSdkVersion 21
        targetSdkVersion compile_sdk
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    ndkVersion "25.1.8937393"

    signingConfigs {
        release {
            keyAlias keystoreProperties["keyAlias"]
            keyPassword keystoreProperties["keyPassword"]
            storePassword keystoreProperties["storePassword"]
            storeFile file("upload-keystore.jks")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            lintOptions {
                disable "InvalidPackage"
                disable "Instantiatable"
                checkReleaseBuilds false
                abortOnError false
            }
        }
    }
}

flutter {
    source "../.."
}

dependencies {
    testImplementation "junit:junit:4.13.2"
    androidTestImplementation "androidx.test:runner:1.5.1"
    androidTestImplementation "androidx.test.espresso:espresso-core:3.5.0"
}